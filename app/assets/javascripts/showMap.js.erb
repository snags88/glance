var mapConfig = {
  icon: L.icon({
    iconUrl: '<%= asset_path("marker-icon-2x.png") %>',
    shadowUrl: '<%= asset_path("marker-shadow.png") %>',
    iconSize:     [25, 41],
    shadowSize:   [41, 41],
    iconAnchor:   [12, 41],
    popupAnchor:  [1, -34]
  }),
  baseLayer: L.tileLayer('https://{s}.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
    maxZoom: 18,
    id: 'snags88.f17d4012',
    accessToken: 'pk.eyJ1Ijoic25hZ3M4OCIsImEiOiIyNHRGdHRzIn0.9kvD8k6z9Ib6j5H9NiuDBg',
    noWrap: true
  }),
  popupString: function(photo){
    return "<div class =\"popup-div\"><b>" + photo.name + "</b><br><img src=" + photo.link + " class=\"map-image\"></div>";
  },
  firstLocation: function(){
    return locations.information[0].latlong;
  },
  lineColor: 'red'
}

function Photo(lat, long, name, link){
  this.latlong = L.latLng(lat, long);
  this.name = name;
  this.link = link;
  this.marker = L.marker(this.latlong, {icon:mapConfig.icon}).bindPopup(mapConfig.popupString(this));
}

var mapMod = {
  animateView: function(photos, map){
    var origin = photos.slice(-2)[0].latlong;
    var destination =  photos.slice(-1)[0].latlong;

    var distance = Math.sqrt(Math.pow(destination.lat - origin.lat, 2) + Math.pow(destination.lng - origin.lng, 2));
    var duration = distance / 25.0;

    map.setView(destination, 6, {pan: {duration: duration}, animate: true});
    return duration;
  },
  openImage: function(photos, map){
    var marker = photos[photos.length-1].marker;
    marker.openPopup();
  }
}

var locations = {
  currentLocation: 0,
  afterLoad: function(){
    this.getCoordinates();
  },
  getCoordinates: function(){
    var arr = $(".item-box img").map(function(i,e){
      var o = $(this).data();
      if(o.lat === ""){
        return null;
      } else {
        return new Photo(o.lat, o.long, o.name, o.link);
      }
    });

    arr.filter(function(e){ return e === 0 || e });
    this["information"] = arr;
  },
  next: function(map, markerPathLayer){
    if(this.currentLocation === this.information.length){
      markerPathLayer.clearLayers();
      this.currentLocation = 1;
    } else {
      this.currentLocation++;
    }

    map.removeLayer(markerPathLayer);
    var path = this.information.slice(0, this.currentLocation)
    var layer = this.placePath(path, map, markerPathLayer);

    var timeout = mapMod.animateView(path, map) * 1000;
    setTimeout(function(){
      mapMod.openImage(path, map);
    }, timeout);

    return layer;
  },
  prev: function(map, markerPathLayer){
    if(this.currentLocation === 1){
      this.currentLocation = this.information.length;
    } else {
      this.currentLocation--;
    }

    map.removeLayer(markerPathLayer);
    var path = this.information.slice(0, this.currentLocation)
    var layer = this.placePath(path, map, markerPathLayer);

    var timeout = mapMod.animateView(path, map) * 1000;
    setTimeout(function(){
      mapMod.openImage(path, map);
    }, timeout);

    return layer;
  },
  all: function(map, markerPathLayer){
    if(markerPathLayer){
      map.removeLayer(markerPathLayer);
      markerPathLayer.clearLayers();
    }
    this.currentLocation = this.information.length;
    var layer = this.placePath(this.information, map, markerPathLayer);
    map.fitWorld();
    return layer;
  },
  placePath: function(photos, map, layer){
    // need to massage latlongs to remove null ones and add wrapping points
    var latLongs = photos.map(function(){return this.latlong})
    var polyline = L.polyline(latLongs, {color: mapConfig.lineColor});
    var markers = photos.map(function(){return this.marker})

    layer = L.layerGroup(markers)//.addLayer(polyline);
    layer.addTo(map);

    return layer
  }
}

var generateMap = function(){
  var map = L.map('leafmap', {
    center: mapConfig.firstLocation(), //Initial geographical center of the map.
    zoom: 2, //Initial map zoom
    minZoom: 2, //Minimum zoom level of the map
    maxZoom: 17, //Maximum zoom level of the map
    maxBounds: L.latLngBounds([[-180, -180],[180, 180]]),
    // Interaction options
    worldCopyJump: true
  });
  mapConfig.baseLayer.addTo(map);
  return map;
}

var cleanedLatLongs = function(latLngs){
  var array = [], i
  for(i = 0; i < latLngs.length; i++){
    array.push(latLngs[i]);
  }
  return array
}

$(function(){
  var map, markerPathLayer

  locations.afterLoad();

  $("#map-tab-button").on('click',function() {
    map = generateMap();
    markerPathLayer = locations.all(map, markerPathLayer);

    $(this).off();

    $("#map-prev").on('click', function(){
      markerPathLayer = locations.prev(map, markerPathLayer);
    })
    $("#map-all").on('click', function(){
      markerPathLayer = locations.all(map, markerPathLayer);
    })
    $("#map-next").on('click', function(){
      markerPathLayer = locations.next(map, markerPathLayer);
    })
  });

});
