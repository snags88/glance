// $(function(){
//   var svg = drawGlobe("#map");
//   addMouseListener(svg);
//   drawMap(svg);
// })


// var Map = new function() {
//   this.width = 960,
//   this.height = 960,
//   this.projection = d3.geo.orthographic()
//     .scale(475)
//     .translate([this.width / 2, this.height / 2])
//     .clipAngle(90)
//     .precision(.1),
//   this.path = d3.geo.path()
//     .projection(this.projection),
//   this.graticule = d3.geo.graticule()
// }

// var MapMovement = {
//   λ: d3.scale.linear()
//     .domain([0, Map.width])
//     .range([-180, 180]),
//   φ: d3.scale.linear()
//     .domain([0, Map.width])
//     .range([90, -90])
// }

// var drawGlobe = function(selection) {
//   var svg = d3.select(selection).append("svg")
//       .attr("width", Map.width)
//       .attr("height", Map.height);

//   svg.append("defs").append("path")
//       .datum({type: "Sphere"})
//       .attr("id", "sphere")
//       .attr("d", Map.path);

//   svg.append("use")
//       .attr("class", "stroke")
//       .attr("xlink:href", "#sphere");

//   svg.append("use")
//       .attr("class", "fill")
//       .attr("xlink:href", "#sphere");

//   svg.append("path")
//       .datum(Map.graticule)
//       .attr("class", "graticule")
//       .attr("d", Map.path);
//   return svg;
// }

// var drawMap = function(svg){
//   d3.json("<%= asset_path 'world.json' %>", function(error, world) {
//     svg.insert("path", ".graticule")
//         .datum(topojson.feature(world, world.objects.countries))
//         .attr("class", "land")
//         .attr("d", Map.path);

//     svg.insert("path", ".graticule")
//         .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
//         .attr("class", "boundary")
//         .attr("d", Map.path);
//   });
// }

// var addMouseListener = function(svg){
//   svg.on("mousemove", function() {
//     var p = d3.mouse(this);
//     Map.projection.rotate([MapMovement.λ(p[0]), MapMovement.φ(p[1])]);
//     svg.selectAll("path").attr("d", Map.path);
//   });
// }

$(function(){
var degrees = 180 / Math.PI,
    width = 960,
    height = 960;
var loader = d3.dispatch("world"), id = -1;

d3.selectAll("#map")
    .data([
      orthographicProjection(width, height)
          .scale(475)
          .translate([width / 2, height * .56])
    ])
  .append("svg")
    .attr("width", width)
    .attr("height", height)
    .each(function(projection) {
      var path = d3.geo.path().projection(projection),
          svg = d3.select(this).call(drawMap, path, true);
      svg.selectAll(".foreground")
          .call(d3.geo.zoom().projection(projection)
            .scaleExtent([projection.scale() * .7, projection.scale() * 10])
            .on("zoom.redraw", function() {
              if (d3.event.sourceEvent.preventDefault) d3.event.sourceEvent.preventDefault();
              svg.selectAll("path").attr("d", path);
            }));
      loader.on("world." + ++id, function() { svg.selectAll("path").attr("d", path); });
    });


d3.json("<%= asset_path 'world.json' %>", function(error, world) {
  d3.selectAll("svg").insert("path", ".foreground")
      .datum(topojson.feature(world, world.objects.countries))
      .attr("class", "land");
  d3.selectAll("svg").insert("path", ".foreground")
      .datum(topojson.mesh(world, world.objects.countries))
      .attr("class", "border");
  loader.world();
});

})

function drawMap(svg, path, mousePoint) {
  var projection = path.projection();

  svg.append("path")
      .datum(d3.geo.graticule())
      .attr("class", "graticule")
      .attr("d", path);

  svg.append("path")
      .datum({type: "Sphere"})
      .attr("class", "foreground")
      .attr("d", path)
      .on("mousedown.grab", function() {
        var point;
        if (mousePoint) point = svg.insert("path", ".foreground")
            .datum({type: "Point", coordinates: projection.invert(d3.mouse(this))})
            .attr("class", "point")
            .attr("d", path);
        var path = d3.select(this).classed("zooming", true),
            w = d3.select(window).on("mouseup.grab", function() {
              path.classed("zooming", false);
              w.on("mouseup.grab", null);
              if (mousePoint) point.remove();
            });
      });
}

//creates orthographic projection
function orthographicProjection(width, height) {
  return d3.geo.orthographic()
      .precision(.5)
      .clipAngle(90)
      .clipExtent([[-1, -1], [width + 1, height + 1]])
      .translate([width / 2, height / 2])
      .scale(width / 2 - 10)
      .rotate([0, -30]);
}
